/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forme;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.ModelZemlja;
import model.Prijava;
import model.Stanovnik;
import model.Stavka;
import model.WrapPrijava;
import model.Zemlja;
import transfer.KlijentZahtev;

/**
 *
 * @author USER
 */
public class Izmena extends javax.swing.JFrame {

    /**
     * Creates new form Izmena
     */
    private RegistovanForma rf;
    private WrapPrijava w; 
    private model.ModelZemlja mz;
    public Izmena(RegistovanForma aThis, WrapPrijava get) {
        initComponents();
        rf=aThis;
        w=get;
        jComboBox1.setSelectedItem(w.getP().getNp());
        jTextField_di.setText(new SimpleDateFormat("dd.MM.yyyy.").format(w.getP().getDi()));
        jTextField_du.setText(new SimpleDateFormat("dd.MM.yyyy.").format(w.getP().getDu()));
        mz=new ModelZemlja(new ArrayList<>());
        jTable_z.setModel(mz);
        
        komunikacija.Komunikacija.getInstance().posalji(new KlijentZahtev(operacije.Operacije.vrati_z, ""));
        List<Zemlja> sve=(List<Zemlja>)komunikacija.Komunikacija.getInstance().procitaj().getOdg();
        for(Zemlja z:sve)
        {
            jComboBox2.addItem(z);
            if(get.getZemlje().contains(z.getNaz()))
                mz.getL().add(z);
        }
        mz.fireTableDataChanged();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_z = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField_du = new javax.swing.JTextField();
        jTextField_di = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Putnicki automobil", "Motocikl", "Autobus", "Avio prevoz" }));

        jLabel4.setText("Datum ulaska(dd.MM.yyyy.):");

        jLabel8.setText("Zemlja/zemlje putovanja:");

        jLabel5.setText("Datum izlaska(dd.MM.yyyy.):");

        jTable_z.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Unete zemlje"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_z.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(jTable_z);

        jLabel7.setText("Nacin putovanja:");

        jButton1.setText("Dodaj zemlju");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Obrisi zemlju");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Sacuvaj izmenu");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(13, 13, 13)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField_du)
                                    .addComponent(jTextField_di)
                                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(2, 2, 2)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(136, 136, 136)
                            .addComponent(jButton3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(14, 14, 14)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(7, 7, 7)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jTextField_du, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jTextField_di, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton2))
                    .addGap(5, 5, 5)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButton3)
                    .addGap(8, 8, 8)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(mz.getL().contains((Zemlja)jComboBox2.getSelectedItem()))return ;
        mz.getL().add((Zemlja) jComboBox2.getSelectedItem());
        mz.fireTableDataChanged();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int r=jTable_z.getSelectedRow();
        if(r==-1)return ;
        mz.getL().remove(r);
        mz.fireTableDataChanged();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
            
         if(postojepraznapolja())
        {
            JOptionPane.showMessageDialog(this, "Sva polja su obavezna!");return ;
        }
         if(mz.getL().isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Prijava mora imati bar jednu zemlju");return ;
        }
        Date du=null, di=null;
        try {
            du=new SimpleDateFormat("dd.MM.yyyy.").parse(jTextField_du.getText());
            di=new SimpleDateFormat("dd.MM.yyyy.").parse(jTextField_di.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Los format datuma ulaska i/ili izlaska");return ;
        }
        Date d=new Date();
        SimpleDateFormat format=new SimpleDateFormat("dd.MM.yyyy.");
        try {
            d=format.parse(format.format(d));
        } catch (ParseException ex) {
            Logger.getLogger(Izmena.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(du.compareTo(d)<0)
        {
            JOptionPane.showMessageDialog(this, "Datuma ulaska ne sme da bude pre danasnjeg");return ;
        }
        if(di.before(du))
        {
            JOptionPane.showMessageDialog(this, "Datuma izlaska ne sme da bude pre datuma ulaska");return  ;
        }
        if(((di.getTime()-du.getTime())/1000/60/60/24)>90)
        {
            JOptionPane.showMessageDialog(this, "Korisnik moze da se zadrzi maksimalno 90 dana na putu");return ;
        }
        Prijava p=w.getP();
        Prijava nova=new Prijava(p.getId(), p.getS(), du, di, (String) jComboBox1.getSelectedItem());
        List<Stavka>l=new ArrayList<>();
        List<String>ls=new ArrayList<>();
        for(Zemlja z:mz.getL())
        {
            l.add(new Stavka(nova, z));
            ls.add(z.getNaz());
        }
        if(!proveraPutovanja(nova))
        {
            JOptionPane.showMessageDialog(this, "Vec imate prijavljeno putovanje u tom periodu za neku od zemalja");return ;
        }
        komunikacija.Komunikacija.getInstance().posalji(new KlijentZahtev(operacije.Operacije.izmeni_prijavu, l));
        if((boolean)komunikacija.Komunikacija.getInstance().procitaj().getOdg())
        {
            JOptionPane.showMessageDialog(this, "Uspesno izmenjena prijava");
            w.setP(nova);
            w.setZemlje(String.join(",", ls));
            rf.osvezi();
            return ;
        }
        JOptionPane.showMessageDialog(this, "Neuspesno izmenjena prijava");
    }//GEN-LAST:event_jButton3ActionPerformed
    private boolean postojepraznapolja() {
        if(jTextField_du.getText().isBlank() || jTextField_di.getText().isBlank())
            return true;
        return false;
    }

     private boolean proveraPutovanja(Prijava nova) {
        List<WrapPrijava>stare=rf.getMp().getL();
        for(WrapPrijava w:stare)
        {
            Prijava s=w.getP();
            if(s.getId()!=nova.getId() && nova.getDu().compareTo(s.getDi())<=0 && s.getDu().compareTo(nova.getDi())<=0 &&podudarajuZemlje(w))
                return false;
        }
        return true;
    }

    private boolean podudarajuZemlje(WrapPrijava w) {
        for(Zemlja z:mz.getL())
        {
            if(w.getZemlje().contains(z.getNaz()))return true;
        }
        return false;
    }

 
    /**
     * @param args the command line arguments
     */
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<Zemlja> jComboBox2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_z;
    private javax.swing.JTextField jTextField_di;
    private javax.swing.JTextField jTextField_du;
    // End of variables declaration//GEN-END:variables

 
}
